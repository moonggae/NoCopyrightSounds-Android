package com.ccc.ncs.data.repository

import androidx.room.withTransaction
import com.ccc.ncs.database.NcsDatabase
import com.ccc.ncs.database.dao.PlayListDao
import com.ccc.ncs.database.model.PlayListEntity
import com.ccc.ncs.database.model.reference.PlayListMusicCrossRef
import com.ccc.ncs.database.model.relation.asModel
import com.ccc.ncs.model.Music
import com.ccc.ncs.model.PlayList
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map
import java.util.UUID
import javax.inject.Inject

class DefaultPlayListRepository @Inject constructor(
    private val playListDao: PlayListDao,
    private val musicRepository: MusicRepository,
    private val database: NcsDatabase
) : PlayListRepository {
    override fun getPlayLists(): Flow<List<PlayList>> = playListDao
        .getAllPlayList()
        .map { list -> list.map { it.asModel() } }

    override fun getPlayList(id: UUID): Flow<PlayList?> = playListDao
        .getPlayList(id)
        .map { it?.asModel() }

    override suspend fun getAutoGeneratedPlayList(): PlayList {
        var playlist = playListDao.getAutoGeneratedPlaylist()
        if (playlist == null) {
            playListDao.insertPlayList(
                PlayListEntity(
                    name = "",
                    isUserCreated = false
                )
            )

            playlist = playListDao.getAutoGeneratedPlaylist()
        }

        return playlist!!.asModel()
    }



    override suspend fun insertPlayList(name: String, isUserCreated: Boolean) {
        playListDao.insertPlayList(
            PlayListEntity(
                name = name,
                isUserCreated = isUserCreated
            )
        )
    }

    override suspend fun setPlayListMusics(playListId: UUID, musics: List<Music>) {
        setPlayListMusicsWithId(
            playListId = playListId,
            musicIds = musics.map { it.id }
        )
    }

    override suspend fun setPlayListMusicsWithId(playListId: UUID, musicIds: List<UUID>) {
        database.withTransaction {
            playListDao.unLinkAllMusic(playListId)
            playListDao.linkMusicToPlayList(musicIds.map {
                PlayListMusicCrossRef(
                    playListId = playListId,
                    musicId = it
                )
            })
        }
    }

    override suspend fun updatePlayListName(playListId: UUID, name: String) {
        playListDao.updatePlayList(
            PlayListEntity(
                id = playListId,
                name = name,
                isUserCreated = true
            )
        )
    }

    override suspend fun deletePlayList(id: UUID) = playListDao.deletePlayList(id)
}