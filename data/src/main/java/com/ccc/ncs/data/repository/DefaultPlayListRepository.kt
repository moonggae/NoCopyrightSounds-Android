package com.ccc.ncs.data.repository

import com.ccc.ncs.database.dao.PlayListDao
import com.ccc.ncs.database.model.PlayListEntity
import com.ccc.ncs.database.model.relation.asModel
import com.ccc.ncs.domain.repository.PlayListRepository
import com.ccc.ncs.model.Music
import com.ccc.ncs.model.PlayList
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.transformLatest
import java.util.UUID
import javax.inject.Inject

class DefaultPlayListRepository @Inject constructor(
    private val playListDao: PlayListDao
): PlayListRepository {
    override fun getPlayLists(): Flow<List<PlayList>> = playListDao
        .getAllPlayList()
        .map { list -> list.map { it.asModel() } }

    override fun getPlayList(id: UUID): Flow<PlayList?> = playListDao
        .getPlayList(id)
        .map { it?.asModel() }

    @OptIn(ExperimentalCoroutinesApi::class)
    override fun getAutoGeneratedPlayList(): Flow<PlayList> =
        playListDao.getAutoGeneratedPlaylist()
            .transformLatest { playlist ->
                if (playlist == null) {
                    val newPlaylist = PlayListEntity(
                        name = "",
                        isUserCreated = false
                    )
                    playListDao.insertPlayList(newPlaylist)
                } else {
                    emit(playlist.asModel())
                }
            }

    override suspend fun insertPlayList(name: String, isUserCreated: Boolean) {
        playListDao.insertPlayList(
            PlayListEntity(
                name = name,
                isUserCreated = isUserCreated
            )
        )
    }

    override suspend fun setPlayListMusics(playListId: UUID, musics: List<Music>) {
        playListDao.setMusics(
            playlistId = playListId,
            musicIds = musics.map { it.id }.distinct()
        )
    }

    override suspend fun setPlayListMusicsWithId(playListId: UUID, musicIds: List<UUID>) {
        playListDao.setMusics(playListId, musicIds)
    }

    override suspend fun updatePlayListName(playListId: UUID, name: String) {
        playListDao.updatePlayList(
            PlayListEntity(
                id = playListId,
                name = name,
                isUserCreated = true
            )
        )
    }

    override suspend fun deletePlayList(id: UUID) = playListDao.deletePlayList(id)
}