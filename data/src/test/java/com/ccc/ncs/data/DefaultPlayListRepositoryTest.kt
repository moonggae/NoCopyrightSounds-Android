package com.ccc.ncs.data

import com.ccc.ncs.data.repository.DefaultPlayListRepository
import com.ccc.ncs.data.testdouble.TestGenreDao
import com.ccc.ncs.data.testdouble.TestMoodDao
import com.ccc.ncs.data.testdouble.TestMusicDao
import com.ccc.ncs.data.testdouble.TestPlaylistDao
import com.ccc.ncs.database.model.asEntity
import com.ccc.ncs.database.test.mock.MockMusicList
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.test.runTest
import org.junit.Assert.assertEquals
import org.junit.Assert.assertFalse
import org.junit.Assert.assertNotNull
import org.junit.Assert.assertTrue
import org.junit.Before
import org.junit.Test

class DefaultPlayListRepositoryTest {
    private lateinit var repository: DefaultPlayListRepository
    private lateinit var playListDao: TestPlaylistDao
    private lateinit var musicDao: TestMusicDao
    private lateinit var genreDao: TestGenreDao
    private lateinit var moodDao: TestMoodDao

    @Before
    fun setup() = runTest {
        genreDao = TestGenreDao()
        moodDao = TestMoodDao()
        musicDao = TestMusicDao(genreDao, moodDao)
        playListDao = TestPlaylistDao(musicDao)

        musicDao.insertMusics(MockMusicList.map { it.asEntity() })

        repository = DefaultPlayListRepository(playListDao = playListDao)
    }

    @Test
    fun `test get playlists returns all playlists`() = runTest {
        // Given
        val playlistNames = listOf("Playlist 1", "Playlist 2", "Playlist 3")
        playlistNames.forEach { name ->
            repository.insertPlayList(name, true)
        }

        // When
        val playlists = repository.getPlayLists().first()

        // Then
        assertEquals(playlistNames.size, playlists.size)
        assertTrue(playlists.all { it.isUserCreated })
        assertTrue(playlistNames.containsAll(playlists.map { it.name }))
    }

    @Test
    fun `test get playlist by id returns correct playlist`() = runTest {
        // Given
        repository.insertPlayList("Test Playlist", true)
        val playlistId = repository.getPlayLists().first().first().id

        // When
        val playlist = repository.getPlayList(playlistId).first()

        // Then
        assertNotNull(playlist)
        assertEquals("Test Playlist", playlist?.name)
        assertTrue(playlist?.isUserCreated == true)
    }

    @Test
    fun `test get auto generated playlist creates new if not exists`() = runTest {
        // When
        val playlist = repository.getAutoGeneratedPlayList().first()

        // Then
        assertFalse(playlist.isUserCreated)
        assertEquals("", playlist.name)
    }

    @Test
    fun `test insert playlist creates new playlist`() = runTest {
        // When
        repository.insertPlayList("New Playlist", true)
        val playlists = repository.getPlayLists().first()

        // Then
        assertEquals(1, playlists.size)
        assertEquals("New Playlist", playlists.first().name)
        assertTrue(playlists.first().isUserCreated)
    }

    @Test
    fun `test set playlist musics updates playlist content`() = runTest {
        // Given
        repository.insertPlayList("Test Playlist", true)
        val playlistId = repository.getPlayLists().first().first().id
        val testMusics = MockMusicList.take(3)

        // When
        repository.setPlayListMusics(playlistId, testMusics)
        val playlist = repository.getPlayList(playlistId).first()

        println(playlist)

        // Then
        assertNotNull(playlist)
        assertEquals(testMusics.size, playlist?.musics?.size)
        assertTrue(playlist?.musics?.map { it.id }?.containsAll(testMusics.map { it.id }) == true)
    }

    @Test
    fun `test set playlist musics with ids updates playlist content`() = runTest {
        // Given
        repository.insertPlayList("Test Playlist", true)
        val playlistId = repository.getPlayLists().first().first().id
        val musicIds = MockMusicList.take(3).map { it.id }

        // When
        repository.setPlayListMusicsWithId(playlistId, musicIds)
        val playlist = repository.getPlayList(playlistId).first()

        // Then
        assertNotNull(playlist)
        assertEquals(musicIds.size, playlist?.musics?.size)
        assertTrue(playlist?.musics?.map { it.id }?.containsAll(musicIds) == true)
    }

    @Test
    fun `test update playlist name changes name`() = runTest {
        // Given
        repository.insertPlayList("Old Name", true)
        val playlistId = repository.getPlayLists().first().first().id

        // When
        repository.updatePlayListName(playlistId, "New Name")
        val updatedPlaylist = repository.getPlayList(playlistId).first()

        // Then
        assertEquals("New Name", updatedPlaylist?.name)
    }

    @Test
    fun `test delete playlist removes playlist`() = runTest {
        // Given
        repository.insertPlayList("Test Playlist", true)
        val playlistId = repository.getPlayLists().first().first().id

        // When
        repository.deletePlayList(playlistId)
        val playlists = repository.getPlayLists().first()

        // Then
        assertTrue(playlists.isEmpty())
    }

    @Test
    fun `test set playlist musics handles duplicates`() = runTest {
        // Given
        repository.insertPlayList("Test Playlist", true)
        val playlistId = repository.getPlayLists().first().first().id
        val duplicateMusics = MockMusicList.take(2) + MockMusicList.first()

        // When
        repository.setPlayListMusics(playlistId, duplicateMusics)
        val playlist = repository.getPlayList(playlistId).first()

        // Then
        assertNotNull(playlist)
        assertEquals(2, playlist?.musics?.size)
    }
}