package com.ccc.ncs.domain.usecase

import com.ccc.ncs.domain.repository.MusicRepository
import com.ccc.ncs.domain.repository.PlayListRepository
import com.ccc.ncs.domain.repository.PlayerRepository
import kotlinx.coroutines.flow.first
import java.util.UUID

class PlayMusicsUseCase(
    private val playlistRepository: PlayListRepository,
    private val playerRepository: PlayerRepository,
    private val musicRepository: MusicRepository,
    private val playPlaylistUseCase: PlayPlaylistUseCase
) {
    suspend operator fun invoke(musicIds: List<UUID>): Result<Unit> = runCatching {
        val playlist =
            playerRepository.playlist.first() ?:
            playlistRepository.getAutoGeneratedPlayList().first()

        val newMusics = musicRepository.getMusics(musicIds).first()
        val updatedMusics = newMusics + (playlist.musics - newMusics.toSet())
        playlistRepository.setPlayListMusics(playlist.id, updatedMusics)

        val startIndex = updatedMusics
            .indexOfFirst { musicIds.contains(it.id) }
            .takeIf { it != -1 } ?: 0

        playPlaylistUseCase(playlist.id, startIndex).getOrThrow()
    }
}